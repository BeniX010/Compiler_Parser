/**********************************************************************
 Java CUP specification for a parser for Simple programs
 **********************************************************************/

import java_cup.runtime.*;

parser code {:
public void report_error(String message, Object info) {
int line = 0;
int column = 0;
StringBuilder m = new StringBuilder("");
if (info instanceof java_cup.runtime.Symbol) {
java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
String tokenName = sym.terminalNames[s.sym];
// Special case EOF token program
if (s.sym != sym.EOF) {
line = ((TokenVal) s.value).linenum;
column = ((TokenVal) s.value).charnum;
}
m.append(" : " + message + " - Token: " + tokenName + " value " + s.value);
}
Errors.fatal(line, column, m.toString());
}
:};


/* Terminals (tokens returned by the scanner) */
terminal TokenVal       PUBLIC;
terminal TokenVal       CLASS;
terminal TokenVal       STATIC;
terminal TokenVal       INT;
terminal TokenVal       BOOLEAN;
terminal TokenVal       STRING;
terminal TokenVal       VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal TokenVal       IF;
terminal TokenVal       ELSE;
terminal TokenVal       WHILE;
terminal TokenVal 	DO;
terminal TokenVal       PRINT;
terminal TokenVal       RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StringLitTokenVal STRINGLITERAL;
terminal TokenVal       LCURLY;
terminal TokenVal       RCURLY;
terminal TokenVal       LPAREN;
terminal TokenVal       RPAREN;
terminal TokenVal       COMMA;
terminal TokenVal       ASSIGN;
terminal TokenVal       SEMICOLON;
terminal TokenVal       PLUS;
terminal TokenVal       MINUS;
terminal TokenVal       TIMES;
terminal TokenVal       DIVIDE;
terminal TokenVal       NOT;
terminal TokenVal       AND;
terminal TokenVal       OR;
terminal TokenVal       EQUALS;
terminal TokenVal       NOTEQUALS;
terminal TokenVal       LESS;
terminal TokenVal       GREATER;
terminal TokenVal       LESSEQ;
terminal TokenVal       GREATEREQ;
terminal TokenVal		CASE;
terminal TokenVal		SWITCH;
terminal TokenVal		DEFAULT;
terminal TokenVal		COLON;
terminal TokenVal		POWER;
terminal TokenVal		UMINUS;

/* Non-terminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      	program;
non terminal ClassBodyNode    	classBody;
non terminal Sequence         	declList;
non terminal DeclNode	     	decl;
non terminal FieldDeclNode    	fieldDecl;
non terminal MethodDeclNode		methodDecl;
non terminal FormalsListNode	formals;
non terminal Sequence			formalsList;
non terminal FormalDeclNode		formalDecl;
non terminal MethodBodyNode		methodBody;
non terminal Sequence			varDeclList;
non terminal VarDeclNode		varDecl;
non terminal Sequence			stmtList;
non terminal StmtNode			stmt;
non terminal ExpNode			exp;
non terminal Sequence			actualList;
non terminal TypeNode	      	type;
non terminal IdNode	      		id;
non terminal SwitchBodyNode		switchBody;
non terminal Sequence			caseList;
non terminal CaseDeclNode		caseNode;
non terminal DefaultDeclNode	defaultNode;
 
/*Precedences*/
precedence left AND, OR;
precedence nonassoc ASSIGN, EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right NOT, UMINUS, POWER;

start with program;

/*
 * grammar with actions
 *
 * add more here
 */
program		::= PUBLIC CLASS id:i LCURLY classBody:c RCURLY
		{: RESULT = new ProgramNode(i, c);
		:}
		;

classBody	::= declList:d
		{: RESULT = new ClassBodyNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: dl.addToEnd(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new Sequence();
		:}
		;

decl		::= fieldDecl:v
		{: RESULT = v;
		:}
		| methodDecl:m
		{: RESULT = m;
		:}
		;

fieldDecl	::= STATIC type:t id:i SEMICOLON
		{: RESULT = new FieldDeclNode(t, i);
		:}
		;

methodDecl	::= PUBLIC STATIC VOID id:i formals:f methodBody:m // no return value
			{:RESULT = new MethodDeclNode(i,f,m);
			:}
            | PUBLIC STATIC type:t id:i formals:f methodBody:m // int return value allowed
			{:RESULT = new MethodDeclNode(t,i,f,m);
			:}	
	        ;

formals		::= LPAREN RPAREN
		{:RESULT = new FormalsListNode(new Sequence());
		:}
		| LPAREN formalsList:fl RPAREN
		{:RESULT = new FormalsListNode(fl);
		:}
		;

formalsList	::= formalDecl:fd
		{:Sequence s = new Sequence();
		s.addToEnd(fd);
		RESULT = s;
		:}
		| formalDecl:fd COMMA formalsList:fl
		{:
			fl.addToFront(fd);
			RESULT = fl;
		:}
		;

formalDecl	::= type:t id:i
			{: RESULT = new FormalDeclNode(t,i);
			:}
		;

methodBody	::= LCURLY varDeclList:vdl stmtList:sl RCURLY
			{:RESULT = new MethodBodyNode(new DeclListNode(vdl),new StmtListNode(sl));
			:}
		;

varDeclList	::= varDeclList:vdl varDecl:vd
			{:vdl.addToEnd(vd);
			RESULT = vdl;
			:}
			| /* epsilon */
			{:RESULT = new Sequence();
			:}
		;

varDecl		::= type:t id:i SEMICOLON
			{:RESULT = new VarDeclNode(t,i);
			:}
		;

stmtList	::= stmtList:sl stmt:s
			{:
			sl.addToEnd(s);
			RESULT = sl;
			:}
			| /* epsilon */
			{:RESULT = new Sequence();
			:}
		;

stmt		::= PRINT LPAREN exp:e RPAREN SEMICOLON
			{:RESULT = new PrintStmtNode(e);
			:}
	        | id:i ASSIGN exp:e SEMICOLON
			{:RESULT = new AssignStmtNode(i,e);
			:}
	        | IF LPAREN exp:e RPAREN LCURLY stmtList:sl RCURLY
			{:RESULT = new IfStmtNode(e,new StmtListNode(sl));
			:}
	        | IF LPAREN exp:e RPAREN LCURLY stmtList:sl1 RCURLY ELSE LCURLY stmtList:sl2 RCURLY
			{:RESULT = new IfElseStmtNode(e,new StmtListNode(sl1),new StmtListNode(sl2));
			:}
	        | DO LCURLY stmtList:sl RCURLY WHILE LPAREN exp:e RPAREN
			{:RESULT = new WhileStmtNode(e, new StmtListNode(sl));
			:} 
			| RETURN SEMICOLON
			{:RESULT = new ReturnStmtNode();
			:}
			| RETURN exp:e SEMICOLON // return with a value
			{:RESULT = new ReturnStmtNode(e);
			:}
	        | id:i LPAREN RPAREN SEMICOLON  	  // function call with no args
			{:RESULT = new CallStmtNode(i);
			:}
	        | id:i LPAREN actualList:al RPAREN SEMICOLON // with args
			{:RESULT = new CallStmtNode(i,new ExpListNode(al));
			:}
			| LCURLY varDeclList:vdl stmtList:sl RCURLY  // nested block
			{:RESULT = new NestedBlockNode(new DeclListNode(vdl),new StmtListNode(sl));
			:}
			| SWITCH LPAREN exp:e RPAREN LCURLY switchBody:sb RCURLY
			{:RESULT = new SwitchStmtNode(e,sb);
			:}
		;	

switchBody	::= caseList:cl
			{:RESULT = new SwitchBodyNode(cl);
			:}
		;

caseList	::= caseNode:cn caseList:cl
			{:cl.addToFront(cn);
			RESULT = cl;
			:}
			| defaultNode:dn
			{:Sequence s = new Sequence();
			s.addToFront(dn);
			RESULT = s;
			:}
			| /*epsilon*/
			{:RESULT = new Sequence();
			:}
		;

caseNode	::= CASE exp:e COLON varDeclList:vdl stmtList:sl
			{:RESULT = new CaseDeclNode(e,new DeclListNode(vdl),new StmtListNode(sl));
			:}
		;

defaultNode ::= DEFAULT COLON varDeclList:vdl stmtList:sl
			{:RESULT = new DefaultDeclNode(new DeclListNode(vdl),new StmtListNode(sl));
			:}
		;
exp			::= exp:e1 PLUS exp:e2
			{:RESULT = new PlusNode(e1,e2);
			:}
	        | exp:e1 MINUS exp:e2
			{:RESULT = new MinusNode(e1,e2);
			:}
	        | exp:e1 TIMES exp:e2
			{:RESULT = new TimesNode(e1,e2);
			:}
	        | exp:e1 DIVIDE exp:e2
			{:RESULT = new DivideNode(e1,e2);
			:}
	        | NOT exp:e
			{:RESULT = new NotNode(e);
			:}
	        | exp:e1 AND exp:e2
			{:RESULT = new AndNode(e1,e2);
			:}
	        | exp:e1 OR exp:e2
			{:RESULT = new OrNode(e1,e2);
			:}
			| exp:e1 EQUALS exp:e2
			{:RESULT = new EqualsNode(e1,e2);
			:}
			| exp:e1 NOTEQUALS exp:e2
			{:RESULT = new NotEqualsNode(e1,e2);
			:}
			| exp:e1 LESS exp:e2
			{:RESULT = new LessNode(e1,e2);
			:}
			| exp:e1 GREATER exp:e2
			{:RESULT = new GreaterNode(e1,e2);
			:}
			| exp:e1 LESSEQ exp:e2
			{:RESULT = new LessEqNode(e1,e2);
			:}
			| exp:e1 GREATEREQ exp:e2
			{:RESULT = new GreaterEqNode(e1,e2);
			:}
			| exp:e1 POWER exp:e2 
			{:RESULT = new PowerNode(e1,e2);
			:}
			| MINUS exp:e
			{:RESULT = new UnaryMinusNode(e);
			:}%prec UMINUS
			| id:i
			{:RESULT = i;
			:}
	        | INTLITERAL:il
			{:RESULT = new IntLitNode(il.linenum, il.charnum, il.intVal);
			:}
	        | STRINGLITERAL:sl
			{:RESULT = new StringLitNode(sl.linenum, sl.charnum, sl.stringVal);
			:}
	        | TRUE:t
			{:RESULT = new TrueNode(t.linenum, t.charnum);
			:}
	        | FALSE:f
			{:RESULT = new FalseNode(f.linenum, f.charnum);
			:}
	        | LPAREN exp:e RPAREN
			{:RESULT = e;
			:}
	        | id:i LPAREN RPAREN  	  // function call with no args
			{:RESULT = new CallExpNode(i);
			:}
	        | id:i LPAREN actualList:al RPAREN // with args
			{:RESULT = new CallExpNode(i,new ExpListNode(al));
			:}
		
		;	

actualList	::= exp:e
			{:Sequence s = new Sequence();
			s.addToEnd(e);
			RESULT = s;
			:}
			| actualList:al COMMA exp:e
			{:al.addToEnd(e);
			RESULT = al;
			:}
			;

type		::= INT
		{: RESULT = new IntNode();
		:}
		| BOOLEAN
		{:RESULT = new BooleanNode();
		:}
		| STRING
		{:RESULT = new StringNode();
		:}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;


